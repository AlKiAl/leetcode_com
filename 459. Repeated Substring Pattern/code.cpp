/*
Time:O(n^2) 
Space:O(n)    
*/
class Solution {
public:
    bool repeatedSubstringPattern(string s) { // is true --> s == P*k : P is str
        
        int size = s.size();
        
        string postfix = s.substr(1, size-1); // —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
        string prefix = s.substr(0, size-1); //  —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞.
        
        string sFold = postfix + prefix; // head + P*k' + tail : k' == (k-1)*2
        //string sFold = prefix + postfix; // P*k^ + tail + head + P*k^ : k^ == k-1
        return sFold.find(s) != string::npos;
    }
};
/*
–ß–∏—Å—Ç—ã–π —Å–¥–≤–∏–≥ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞): –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —à–∞–±–ª–æ–Ω –ø—É—Ç—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è s+s.

–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—ã—Ç—å "—Ä–∞–∑—Ä–µ–∑–∞–Ω–∞" –∏ 
"–ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–∞" –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω–∞ —Ü–∏–∫–ª–∏—á–Ω–∞.

–ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏–∏ –∏—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª—ã –∏–∑ –¥–≤–æ–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ–º ùë†
*/
